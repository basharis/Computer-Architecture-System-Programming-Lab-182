PSEUDO CODE
===========

START: ####
ip = ip + END_OF_VM		; Restart IP to new SIC Program

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Read the three new command arguments 
;; and take out the value in their 
;; annotated memory location.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

READ: ####
A = ip					; A = i
A1 = * A				; A1 = M[i]
A11 = ** A 				; A11 = M[M[i]]
B = ip + 1				; B = i+1
B1 = * B				; B1 = M[i+1]
B11 = ** B 				; B11 = M[M[i+1]]
C = * ip + 2			; C = i+2
C1 = * C 				; C = M[i+2]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; These lines test if A = B = C = 0.
;; If so, they end the program.
;; Otherwise, the main logic is executed.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ST_COND: ####
cmp A1, ZERO
jne CONT
cmp B1, ZERO
jne CONT
cmp C1, ZERO
jne CONT
jmp END

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Main loop - where the entire
;; SIC logic happens
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CONT: ####       ;;;;;;;;;;;;;;; FIX THIS!!!!!!!
A11 = A11 - B11			; M[M[i]]-M[M[i+1]]
* A1 = A11 				; Store it in M[M[i]]
cmp A11, ZERO			; M[M[i]]-M[M[i+1]] < 0 ?
jl BRANCH				; Jump to BRANCH
ip = ip + 3				; ip = ip + 3
jmp READ 
BRANCH: ####
ip = END_OF_VM + C1		; ip = M[i+1]
jmp READ

END: ####
0, 0, 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Labels that have DATA in them,
;; will be stored after the code ends.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ip: 0					; Instruction Pointer
A: 0					; i
A1: 0					; M[i]
A11: 0					; M[M[i]]
B: 0					; i+1
B1: 0					; M[i+1]
B11: 0					; M[M[i+1]]
C: 0					; i+2
C1: 0					; M[i+2]
ONE: 1
ZERO: 0
MINUS_1: -1
END_OF_VM:				; TBD based on the program's length